// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250226221000_AddAppUserIdToComments")]
    partial class AddAppUserIdToComments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8d6a7d5b-10ca-42c0-8613-9fb9e9f7cfeb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ab1ec998-094b-4ca0-8a61-ce13220ae416",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "68060241-8072-41c9-bef4-ab60b3f4a857",
                            RoleId = "39ee54d4-068b-4643-9e80-0f26bb65a70a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "802c2761-8397-40eb-ba64-2e58e554901e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57e949a6-ef8e-405f-b748-c28672aa43d6",
                            Email = "admin@finshark.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@FINSHARK.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAED3Hup7iBlNlErNbFzFPNx/C19h+RFlOL5IPka7CZ8IhZ4FCY+NWKDIZlkTl+jVQ+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "MMRSHQWTAIMEP3J4NADMHRMAXKAPCF6K",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("api.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("StockId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("api.Models.Portfolio", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("AppUserId", "StockId");

                    b.HasIndex("StockId");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("api.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LastDiv")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("MarketCap")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Purchase")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "Hapvida",
                            CreatedAt = new DateTime(2025, 2, 26, 19, 10, 0, 187, DateTimeKind.Local).AddTicks(7657),
                            Industry = "Saúde",
                            LastDiv = 2m,
                            MarketCap = 3L,
                            Purchase = 1m,
                            Symbol = "HAPV3"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "B3",
                            CreatedAt = new DateTime(2025, 2, 26, 19, 10, 0, 187, DateTimeKind.Local).AddTicks(7701),
                            Industry = "Mercado financeiro",
                            LastDiv = 2m,
                            MarketCap = 3L,
                            Purchase = 1m,
                            Symbol = "B3SA3"
                        },
                        new
                        {
                            Id = 3,
                            CompanyName = "Cosan",
                            CreatedAt = new DateTime(2025, 2, 26, 19, 10, 0, 187, DateTimeKind.Local).AddTicks(7706),
                            Industry = "Etanol",
                            LastDiv = 2m,
                            MarketCap = 3L,
                            Purchase = 1m,
                            Symbol = "CSAN3"
                        },
                        new
                        {
                            Id = 4,
                            CompanyName = "Lojas Renner",
                            CreatedAt = new DateTime(2025, 2, 26, 19, 10, 0, 187, DateTimeKind.Local).AddTicks(7709),
                            Industry = "Vestuário",
                            LastDiv = 2m,
                            MarketCap = 3L,
                            Purchase = 1m,
                            Symbol = "LREN3"
                        },
                        new
                        {
                            Id = 5,
                            CompanyName = "Cogna",
                            CreatedAt = new DateTime(2025, 2, 26, 19, 10, 0, 187, DateTimeKind.Local).AddTicks(7713),
                            Industry = "Educação",
                            LastDiv = 2m,
                            MarketCap = 3L,
                            Purchase = 1m,
                            Symbol = "COGN3"
                        },
                        new
                        {
                            Id = 6,
                            CompanyName = "Azevedo & Travassos",
                            CreatedAt = new DateTime(2025, 2, 26, 19, 10, 0, 187, DateTimeKind.Local).AddTicks(7720),
                            Industry = "Construção",
                            LastDiv = 2m,
                            MarketCap = 3L,
                            Purchase = 1m,
                            Symbol = "AZEV4"
                        },
                        new
                        {
                            Id = 7,
                            CompanyName = "Magazine Luiza",
                            CreatedAt = new DateTime(2025, 2, 26, 19, 10, 0, 187, DateTimeKind.Local).AddTicks(7724),
                            Industry = "Varejo",
                            LastDiv = 2m,
                            MarketCap = 3L,
                            Purchase = 1m,
                            Symbol = "MGLU3"
                        },
                        new
                        {
                            Id = 8,
                            CompanyName = "Banco Bradesco",
                            CreatedAt = new DateTime(2025, 2, 26, 19, 10, 0, 187, DateTimeKind.Local).AddTicks(7728),
                            Industry = "Banco",
                            LastDiv = 2m,
                            MarketCap = 3L,
                            Purchase = 1m,
                            Symbol = "BBDC4"
                        },
                        new
                        {
                            Id = 9,
                            CompanyName = "Ambev",
                            CreatedAt = new DateTime(2025, 2, 26, 19, 10, 0, 187, DateTimeKind.Local).AddTicks(7732),
                            Industry = "Bebidas",
                            LastDiv = 2m,
                            MarketCap = 3L,
                            Purchase = 1m,
                            Symbol = "ABEV3"
                        },
                        new
                        {
                            Id = 10,
                            CompanyName = "Banco do Brasil",
                            CreatedAt = new DateTime(2025, 2, 26, 19, 10, 0, 187, DateTimeKind.Local).AddTicks(7737),
                            Industry = "Banco",
                            LastDiv = 2m,
                            MarketCap = 3L,
                            Purchase = 1m,
                            Symbol = "BBAS3"
                        },
                        new
                        {
                            Id = 11,
                            CompanyName = "Petrobras",
                            CreatedAt = new DateTime(2025, 2, 26, 19, 10, 0, 187, DateTimeKind.Local).AddTicks(7741),
                            Industry = "Combustíveis",
                            LastDiv = 2m,
                            MarketCap = 3L,
                            Purchase = 1m,
                            Symbol = "PETR4"
                        },
                        new
                        {
                            Id = 12,
                            CompanyName = "Azul",
                            CreatedAt = new DateTime(2025, 2, 26, 19, 10, 0, 187, DateTimeKind.Local).AddTicks(7745),
                            Industry = "Companhias aéreas",
                            LastDiv = 2m,
                            MarketCap = 3L,
                            Purchase = 1m,
                            Symbol = "AZUL4"
                        },
                        new
                        {
                            Id = 13,
                            CompanyName = "Itaú Unibanco",
                            CreatedAt = new DateTime(2025, 2, 26, 19, 10, 0, 187, DateTimeKind.Local).AddTicks(7749),
                            Industry = "Banco",
                            LastDiv = 2m,
                            MarketCap = 3L,
                            Purchase = 1m,
                            Symbol = "ITUB4"
                        },
                        new
                        {
                            Id = 14,
                            CompanyName = "Itaúsa",
                            CreatedAt = new DateTime(2025, 2, 26, 19, 10, 0, 187, DateTimeKind.Local).AddTicks(7753),
                            Industry = "Holding",
                            LastDiv = 2m,
                            MarketCap = 3L,
                            Purchase = 1m,
                            Symbol = "ITSA4"
                        },
                        new
                        {
                            Id = 15,
                            CompanyName = "CVC",
                            CreatedAt = new DateTime(2025, 2, 26, 19, 10, 0, 187, DateTimeKind.Local).AddTicks(7757),
                            Industry = "Turismo",
                            LastDiv = 2m,
                            MarketCap = 3L,
                            Purchase = 1m,
                            Symbol = "CVCB3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Comment", b =>
                {
                    b.HasOne("api.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("api.Models.Stock", "Stock")
                        .WithMany("Comments")
                        .HasForeignKey("StockId");

                    b.Navigation("AppUser");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("api.Models.Portfolio", b =>
                {
                    b.HasOne("api.Models.AppUser", "AppUser")
                        .WithMany("Portfolios")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Stock", "Stock")
                        .WithMany("Portfolios")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("api.Models.AppUser", b =>
                {
                    b.Navigation("Portfolios");
                });

            modelBuilder.Entity("api.Models.Stock", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Portfolios");
                });
#pragma warning restore 612, 618
        }
    }
}
